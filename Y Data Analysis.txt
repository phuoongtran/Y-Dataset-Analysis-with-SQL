Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 rows
ii. Business table = 10000 rows
iii. Category table = 10000 rows
iv. Checkin table = 10000 rows
v. elite_years table = 10000 rows
vi. friend table = 10000 rows
vii. hours table = 10000 rows
viii. photo table = 10000 rows
ix. review table = 10000 rows
x. tip table = 10000 rows
xi. user table = 10000 rows


SQL code: 

SELECT COUNT(*) 
FROM [tablename];
	

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 distinct values by primary key "id"
ii. Hours = 1562 distinc values from by foreign key "business_id"
iii. Category = 2643 distinc values from by foreign key "business_id"
iv. Attribute = 1115 distinc values from by foreign key "business_id"
v. Review = 10000 distinct values by primary key "id"
vi. Checkin = 493 distinc values from by foreign key "business_id"
vii. Photo = 10000 distinct values by primary key "id"
viii. Tip = 537 distinc values from by foreign key "user_id"
ix. User = 10000 distinct values by primary key "id"
x. Friend = 11 distinc values from by foreign key "user_id"
xi. Elite_years = 2780 distinc values from by foreign key "user_id"

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.
	

SQL code: 

SELECT DISTINCT [column_name] 
FROM [table_name];



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No.
	
	
SQL code used to arrive at answer:
	
SELECT *
FROM user
WHERE name IS NULL 
      OR review_count IS NULL
      OR yelping_since IS NULL
      OR useful IS NULL
      OR funny IS NULL
      OR cool IS NULL
      OR fans IS NULL
      OR average_stars IS NULL
      OR compliment_hot IS NULL
      OR compliment_more IS NULL
      OR compliment_profile IS NULL
      OR compliment_cute IS NULL
      OR compliment_list IS NULL
      OR compliment_note IS NULL
      OR compliment_plain IS NULL
      OR compliment_cool IS NULL
      OR compliment_funny IS NULL
      OR compliment_writer IS NULL
      OR compliment_photos IS NULL;

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3,7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3,6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0,0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1	 	max: 53		avg: 1.9414 
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995 
		

SQL code: 

SELECT min(column_name) as Minimum,
       max(column_name) as Maximum,
       avg(column_name) as Mediane
FROM [table_name];


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
SELECT city,sum(review_count) AS total_review
FROM business
GROUP BY city
ORDER BY total_review DESC;

	Copy and Paste the Result Below:
+-----------------+--------------+
| city            | total_review |
+-----------------+--------------+
| Las Vegas       |        82854 |
| Phoenix         |        34503 |
| Toronto         |        24113 |
| Scottsdale      |        20614 |
| Charlotte       |        12523 |
| Henderson       |        10871 |
| Tempe           |        10504 |
| Pittsburgh      |         9798 |
| Montréal        |         9448 |
| Chandler        |         8112 |
| Mesa            |         6875 |
| Gilbert         |         6380 |
| Cleveland       |         5593 |
| Madison         |         5265 |
| Glendale        |         4406 |
| Mississauga     |         3814 |
| Edinburgh       |         2792 |
| Peoria          |         2624 |
| North Las Vegas |         2438 |
| Markham         |         2352 |
| Champaign       |         2029 |
| Stuttgart       |         1849 |
| Surprise        |         1520 |
| Lakewood        |         1465 |
| Goodyear        |         1155 |
+-----------------+--------------+
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars as star_rating
       ,sum(review_count) AS count
FROM business
WHERE city = "Avon"
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |    10 |
|         2.5 |     6 |
|         3.5 |    88 |
|         4.0 |    21 |
|         4.5 |    31 |
|         5.0 |     3 |
+-------------+-------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT stars as star_rating
       ,sum(review_count) AS count
FROM business
WHERE city = "Beachwood"
GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     8 |
|         2.5 |     3 |
|         3.0 |    11 |
|         3.5 |     6 |
|         4.0 |    69 |
|         4.5 |    17 |
|         5.0 |    23 |
+-------------+-------+
		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT id
       ,review_count
FROM user
ORDER BY review_count DESC
LIMIT 3;

		
	Copy and Paste the Result Below:

+------------------------+--------------+
| id                     | review_count |
+------------------------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw |         2000 |
| -3s52C4zL_DHRK0ULG6qtg |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg |         1339 |
+------------------------+--------------+
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

I found the maximum number and average for both variables review_count and fans, then found that people with more reviews tend to have much more than the average 1.5 fans, so I assume that the 2 variables are positively correlated.

And as shown below, two tables with the same information but sorted differently, we can probably see some similar results which help us to conclude that these 2 variables are positively correlated. But to be exact, I think it would be better if we can use another way (python or data visualisation tools) to verify it, not with SQL.

--ORDER BY number of review
SELECT id, 
       name,
       review_count,
       fans
FROM user
GROUP BY id
ORDER BY review_count DESC;


+------------------------+-----------+--------------+------+
| id                     | name      | review_count | fans |
+------------------------+-----------+--------------+------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 |
| -3s52C4zL_DHRK0ULG6qtg | Sara      |         1629 |   50 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 |
| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 |
| -gokwePdbXjfS0iF7NsUGA | eric      |         1116 |   16 |
| -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 |
| -fUARDNuXAfrOn4WLSZLgA | Ed        |          904 |   38 |
| -hKniZN2OdshWLHYuj21jQ | Nicole    |          864 |   43 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 |
| -B-QEUESGWHPE_889WJaeg | Mark      |          861 |  115 |
| -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |   85 |
| -kO6984fXByyZm3_6z2JYg | Dominic   |          836 |   37 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 |
| -l9giG8TSDBG1jnUBUXp5w | Alison    |          775 |   61 |
| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |   78 |
| -AaBjWJYiQxXkCMDlXfPGw | Tim       |          702 |   35 |
| -jt1ACMiZljnBFvS6RRvnA | L         |          696 |   10 |
| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |  101 |
| -hxUwfo3cMnLTv-CAaP69A | Crissy    |          676 |   25 |
| -H6cTbVxeIRYR-atxdielQ | Lyn       |          675 |   45 |
+------------------------+-----------+--------------+------+

-- ORDER BY number of fans
SELECT id 
       ,name
       ,review_count
       ,fans
FROM user
GROUP BY id
ORDER BY fans DESC

+------------------------+-----------+--------------+------+
| id                     | name      | review_count | fans |
+------------------------+-----------+--------------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |          609 |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |          377 |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 |
| -B-QEUESGWHPE_889WJaeg | Mark      |          861 |  115 |
| -DmqnhW4Omr3YhmnigaqHg | Tiffany   |          408 |  111 |
| -cv9PPT7IHux7XUc9dOpkg | bernice   |          255 |  105 |
| -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 |
| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |  101 |
| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 |
| -4viTt9UC44lWCFJwleMNQ | Ben       |          307 |   96 |
| -3i9bhfvrM3F1wsC9XIB8g | Linda     |          584 |   89 |
| -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |   85 |
| -ePh4Prox7ZXnEBNGKyUEA | Jessica   |          220 |   84 |
| -4BEUkLvHQntN6qPfKJP2w | Greg      |          408 |   81 |
| -C-l8EHSLXtZZVfUAUhsPA | Nieves    |          178 |   80 |
| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |   78 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 |
| -0zEEaDFIjABtPQni0XlHA | Nicole    |          161 |   73 |
+------------------------+-----------+--------------+------+
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Yes. There are 1780 reviews with the word "love" and 232 reviews with the word "hate".
	
	SQL code used to arrive at answer:

-- Count all review that contain the word HATE
SELECT COUNT(text)
FROM review
WHERE text LIKE '%hate%';

-- Count all review that contain the word HATE
SELECT COUNT(text)
FROM review
WHERE text LIKE '%love%';


	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT id,
       name,
       fans
FROM user
ORDER BY fans DESC
LIMIT 10 ;
	
	
	Copy and Paste the Result Below:

+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+

	
		

Part 2: Inferences and Analysis

1. Pick one city or category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
   
   City: Mesa, Min rating star: 2 and Max rating star: 5
	
	
i. Do the two groups you chose to analyze have a different distribution of hours?
   There is a small difference between theses two groups. Those which are rated 2-3 stars have less opening hours in comparision with those rated 4-5 stars. But I don't think that this is a factor that affect the rating.
   
   SQL code used for analysis:

-- Extract businesses with 2-3 stars rating in Mesa:
   SELECT b.id, b.city, b.stars, h.hours
   FROM business b 
   INNER JOIN hours h 
    	ON b.id=h.business_id
   WHERE b.city='Mesa' and stars <=3
   ORDER BY b.stars ASC;
+------------------------+------+-------+-----------------------+
| id                     | city | stars | hours                 |
+------------------------+------+-------+-----------------------+
| 25lVJgvthMyvoRz-W6splw | Mesa |   2.0 | Monday|10:00-21:00    |
| 25lVJgvthMyvoRz-W6splw | Mesa |   2.0 | Tuesday|10:00-21:00   |
| 25lVJgvthMyvoRz-W6splw | Mesa |   2.0 | Friday|10:00-21:00    |
| 25lVJgvthMyvoRz-W6splw | Mesa |   2.0 | Wednesday|10:00-21:00 |
| 25lVJgvthMyvoRz-W6splw | Mesa |   2.0 | Thursday|10:00-21:00  |
| 25lVJgvthMyvoRz-W6splw | Mesa |   2.0 | Sunday|11:00-18:00    |
| 25lVJgvthMyvoRz-W6splw | Mesa |   2.0 | Saturday|10:00-21:00  |
| 0NIXu8EWhXcKqrY2rg2Dqw | Mesa |   3.0 | Monday|9:00-18:00     |
| 0NIXu8EWhXcKqrY2rg2Dqw | Mesa |   3.0 | Tuesday|9:00-18:00    |
| 0NIXu8EWhXcKqrY2rg2Dqw | Mesa |   3.0 | Friday|9:00-18:00     |
| 0NIXu8EWhXcKqrY2rg2Dqw | Mesa |   3.0 | Wednesday|9:00-18:00  |
| 0NIXu8EWhXcKqrY2rg2Dqw | Mesa |   3.0 | Thursday|9:00-18:00   |
| 0NIXu8EWhXcKqrY2rg2Dqw | Mesa |   3.0 | Sunday|10:00-17:00    |
| 0NIXu8EWhXcKqrY2rg2Dqw | Mesa |   3.0 | Saturday|9:00-18:00   |
+------------------------+------+-------+-----------------------+


-- Extract businesses with 4-5 stars rating in Mesa:
   SELECT b.id, b.city, b.stars, h.hours
   FROM business b 
   INNER JOIN hours h 
    	ON b.id=h.business_id
   WHERE b.city='Mesa' and stars >4
   ORDER BY b.stars ASC; 

+------------------------+------+-------+-----------------------+
| id                     | city | stars | hours                 |
+------------------------+------+-------+-----------------------+
| 2jg7v96HM3mNSUrbk3sMxg | Mesa |   4.5 | Monday|9:00-20:00     |
| 2jg7v96HM3mNSUrbk3sMxg | Mesa |   4.5 | Tuesday|9:00-20:00    |
| 2jg7v96HM3mNSUrbk3sMxg | Mesa |   4.5 | Friday|9:00-20:00     |
| 2jg7v96HM3mNSUrbk3sMxg | Mesa |   4.5 | Wednesday|9:00-20:00  |
| 2jg7v96HM3mNSUrbk3sMxg | Mesa |   4.5 | Thursday|9:00-20:00   |
| 2jg7v96HM3mNSUrbk3sMxg | Mesa |   4.5 | Sunday|9:00-20:00     |
| 2jg7v96HM3mNSUrbk3sMxg | Mesa |   4.5 | Saturday|9:00-20:00   |
| 16d3BlncEyCTzb0GxXrBXQ | Mesa |   5.0 | Monday|10:30-22:00    |
| 16d3BlncEyCTzb0GxXrBXQ | Mesa |   5.0 | Tuesday|10:30-22:00   |
| 16d3BlncEyCTzb0GxXrBXQ | Mesa |   5.0 | Friday|10:30-22:00    |
| 16d3BlncEyCTzb0GxXrBXQ | Mesa |   5.0 | Wednesday|10:30-22:00 |
| 16d3BlncEyCTzb0GxXrBXQ | Mesa |   5.0 | Thursday|10:30-22:00  |
| 16d3BlncEyCTzb0GxXrBXQ | Mesa |   5.0 | Sunday|11:00-20:00    |
| 16d3BlncEyCTzb0GxXrBXQ | Mesa |   5.0 | Saturday|10:30-22:00  |
+------------------------+------+-------+-----------------------+

ii. Do the two groups you chose to analyze have a different number of reviews?

Yes. Good rating stars tend to have more review than lower rating stars, more than double to be exact.

+------------+--------------+
| star_group | Total_review |
+------------+--------------+
| 2-3 stars  |         2123 |
| 4-5 stars  |         4752 |
+------------+--------------+

SQL code used for analysis:

SELECT CASE WHEN stars <=3 THEN "2-3 stars"
            ELSE "4-5 stars"
            END "star_group",
       SUM(review_count) AS Total_review
FROM business
WHERE city='Mesa'
GROUP BY star_group;
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

-- total_review_45: total number of 4-5 rating star reviews
-- total_review_23: total number of 2-3 rating star reviews
-- score = total number of 4-5 rating star reviews / total number of 2-3 rating star reviews


According to analysis below, we observe that: 
- The postal code 85215 has the highest score. In this postal code, the number of businesses that have got 4-5 star ratings is 10 times higher than those with 2-3 stars.
- The postal code 85208 has the lowest score, but we have to take into account the fact that the number total of reviews is relatively low.
- The last 3 lines show that have no 2-3 star ratings in these postal codes but we don't have enough information to conclude that the service could be 100% good since the number of reviews received is kinda low. 

+-------------+-----------------+-----------------+-------+
| postal_code | total_review_45 | total_review_23 | score |
+-------------+-----------------+-----------------+-------+
| 85215       |             655 |              64 | 10.23 |
| 85213       |             256 |              66 |  3.88 |
| 85210       |             917 |             262 |   3.5 |
| 85202       |             491 |             148 |  3.32 |
| 85207       |             141 |              49 |  2.88 |
| 85201       |             598 |             244 |  2.45 |
| 85209       |             206 |              90 |  2.29 |
| 85206       |             383 |             230 |  1.67 |
| 85204       |             719 |             578 |  1.24 |
| 85205       |             162 |             147 |   1.1 |
| 85203       |              98 |             119 |  0.82 |
| 85212       |              76 |              95 |   0.8 |
| 85208       |              12 |              22 |  0.55 |
|             |               3 |            None |  None |
| 85211       |              32 |            None |  None |
| 85275       |               3 |            None |  None |
+-------------+-----------------+-----------------+-------+

SQL code used for analysis:

-- I first create a table that show postal code and the total number of review 4-5 stars. Then do the same thing with those with 2-3 stars and finally join these 2 tables together.
SELECT a.postal_code,
       a.total_review_45, 
       b.total_review_23, 
       ROUND(CAST(a.total_review_45 as REAL)/b.total_review_23,2) as score
FROM (SELECT postal_code,
       CASE WHEN stars <=3 THEN "2-3 stars"
            ELSE "4-5 stars"
            END "star_group",
       SUM(review_count) as total_review_45
FROM business
WHERE city='Mesa' AND star_group="4-5 stars"
GROUP BY postal_code) a
LEFT OUTER JOIN (SELECT postal_code,
                   CASE WHEN stars <=3 THEN "2-3 stars"
                        ELSE "4-5 stars"
                        END "star_group",
                   SUM(review_count) as total_review_23
            FROM business
            WHERE city='Mesa' AND star_group="2-3 stars"
            GROUP BY postal_code) b 
    ON a.postal_code=b.postal_code
ORDER BY score DESC;
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Businesses that are still open have more reviews (x7) than those which are closed.
         
ii. Difference 2: Stability. Most businesses that are closed are restaurants. Eventhough in the category table, there are also restaurants that are categorised by their specialities (ex:American, Japanese, Italian,..). They seem to have less stability that bigger businesses like Shopping, Health & Medical, ...
         
         
         
SQL code used for analysis:

-- Group businesses by open/closed status then calculate the total number of businesses, total review and average stars received.
SELECT  CASE WHEN is_open = 1 THEN "OPEN"
	WHEN is_open = 0 THEN "CLOSED"
	END status, 
	count(distinct id) AS businesses,
	sum(review_count) AS total_review,
	avg(stars) AS avg_stars
FROM business
GROUP BY is_open
ORDER BY status DESC;

+--------+------------+--------------+---------------+
| status | businesses | total_review |     avg_stars |
+--------+------------+--------------+---------------+
| OPEN   |       8480 |       269300 | 3.67900943396 |
| CLOSED |       1520 |        35261 | 3.52039473684 |
+--------+------------+--------------+---------------+

-- Extract liste of category that is still OPEN.

SELECT  c.category,
 	b.is_open,
	count(b.id) as Total
FROM business b
INNER JOIN category c 
     ON b.id=c.business_id
WHERE b.is_open=1
GROUP BY c.category
ORDER BY Total DESC;

+------------------------+---------+-------+
| category               | is_open | Total |
+------------------------+---------+-------+
| Restaurants            |       1 |    53 |
| Shopping               |       1 |    25 |
| Food                   |       1 |    20 |
| Health & Medical       |       1 |    16 |
| Home Services          |       1 |    15 |
| Beauty & Spas          |       1 |    12 |
| Nightlife              |       1 |    12 |
| Bars                   |       1 |    11 |
| Active Life            |       1 |    10 |
| Local Services         |       1 |    10 |
| Automotive             |       1 |     9 |
| American (Traditional) |       1 |     8 |
| Hotels & Travel        |       1 |     8 |
| Arts & Entertainment   |       1 |     7 |
| Burgers                |       1 |     7 |
| Fast Food              |       1 |     7 |
| Hair Salons            |       1 |     6 |
| Sandwiches             |       1 |     6 |
| Doctors                |       1 |     5 |
| Mexican                |       1 |     5 |
| Apartments             |       1 |     4 |
| Auto Repair            |       1 |     4 |
| Bakeries               |       1 |     4 |
| Indian                 |       1 |     4 |
| Parks                  |       1 |     4 |
+------------------------+---------+-------+
(Output limit exceeded, 25 of 235 total rows shown)

-- Extract liste of category that is CLOSED

SELECT  c.category, 
	b.is_open, 
	count(b.id) as Total
FROM business b
INNER JOIN category c 
     ON b.id=c.business_id
WHERE b.is_open=0
GROUP BY c.category
ORDER BY Total DESC;

+---------------------------+---------+-------+
| category                  | is_open | Total |
+---------------------------+---------+-------+
| Restaurants               |       0 |    18 |
| Nightlife                 |       0 |     8 |
| Bars                      |       0 |     6 |
| Shopping                  |       0 |     5 |
| American (New)            |       0 |     3 |
| American (Traditional)    |       0 |     3 |
| Event Planning & Services |       0 |     3 |
| Food                      |       0 |     3 |
| Desserts                  |       0 |     2 |
| Gluten-Free               |       0 |     2 |
| Italian                   |       0 |     2 |
| Japanese                  |       0 |     2 |
| Local Services            |       0 |     2 |
| Mexican                   |       0 |     2 |
| Pizza                     |       0 |     2 |
| Sandwiches                |       0 |     2 |
| Specialty Food            |       0 |     2 |
| Venues & Event Spaces     |       0 |     2 |
| Bakeries                  |       0 |     1 |
| Beauty & Spas             |       0 |     1 |
| Beer                      |       0 |     1 |
| Breakfast & Brunch        |       0 |     1 |
| Burgers                   |       0 |     1 |
| Carpet Cleaning           |       0 |     1 |
| Carpet Installation       |       0 |     1 |
+---------------------------+---------+-------+
(Output limit exceeded, 25 of 71 total rows shown)
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do: 

Predict the number of fans a user will have         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

In order to perform this analysis, we need a dataset that contain all the factors that can possibily affect the number of fans one user can have.

That's why I decided to extract certain information from user table like number of reviews given, days since the first day of membership, average star that they gave,...

With all these information, we can import our dataset in a notebook and start building our model with Python.
                           
                  
iii. Output of your finished dataset:

+--------------+--------------+--------+--------+--------+------+---------------+----------------+-----------------+-----------------+------------------+-------------------+
| review_count | days_yelping | useful |  funny |   cool | fans | average_stars | compliment_hot | compliment_cute | compliment_cool | compliment_funny | compliment_photos |
+--------------+--------------+--------+--------+--------+------+---------------+----------------+-----------------+-----------------+------------------+-------------------+
|          245 |       5533.0 |     67 |     22 |      9 |   15 |          3.97 |              2 |               1 |               9 |                9 |                 0 |
|            2 |       2253.0 |      0 |      0 |      0 |    0 |           5.0 |              0 |               0 |               0 |                0 |                 0 |
|           57 |       4849.0 |     34 |     14 |      0 |    0 |          3.79 |              0 |               0 |               0 |                0 |                 0 |
|            8 |       4117.0 |      2 |      3 |      1 |    0 |          2.78 |              0 |               0 |               0 |                0 |                 0 |
|            2 |       2554.0 |      1 |      0 |      0 |    0 |           4.0 |              0 |               0 |               0 |                0 |                 0 |
|           43 |       2938.0 |      1 |      0 |      0 |    1 |          3.84 |              0 |               0 |               0 |                0 |                 0 |
|           26 |       4525.0 |     10 |      2 |      0 |    2 |          3.48 |              0 |               0 |               0 |                0 |                 0 |
|            2 |       3346.0 |      0 |      0 |      0 |    0 |           4.5 |              0 |               0 |               0 |                0 |                 0 |
|            1 |       3487.0 |      0 |      0 |      0 |    0 |           5.0 |              0 |               0 |               0 |                0 |                 0 |
|            7 |       3446.0 |      0 |      0 |      0 |    0 |          4.11 |              0 |               0 |               0 |                0 |                 0 |
|            3 |       2284.0 |      0 |      0 |      2 |    0 |          2.33 |              0 |               0 |               0 |                0 |                 0 |
|            9 |       4323.0 |      0 |      0 |      0 |    0 |          4.33 |              0 |               0 |               0 |                0 |                 0 |
|            5 |       4042.0 |      0 |      0 |      0 |    0 |           5.0 |              0 |               0 |               0 |                0 |                 0 |
|            2 |       2916.0 |     15 |     13 |      9 |    0 |           5.0 |              0 |               0 |               0 |                0 |                 0 |
|           23 |       2481.0 |      0 |      0 |      0 |    0 |          4.17 |              0 |               0 |               0 |                0 |                 0 |
|           28 |       2191.0 |      7 |      1 |      0 |    0 |           4.6 |              0 |               0 |               0 |                0 |                 0 |
|         1153 |       3530.0 | 122921 | 122419 | 122890 |  311 |           4.4 |           7246 |            1176 |           12008 |            12008 |             22219 |
|            4 |       2086.0 |      0 |      0 |      0 |    0 |          4.25 |              0 |               0 |               0 |                0 |                 0 |
|          111 |       3148.0 |     97 |     57 |     32 |    2 |          3.43 |              0 |               0 |               2 |                2 |                 0 |
|            2 |       4511.0 |      1 |      0 |      0 |    0 |           4.0 |              0 |               0 |               0 |                0 |                 0 |
|          213 |       4470.0 |     63 |      6 |      2 |   10 |          3.93 |             11 |               0 |              18 |               18 |                 2 |
|          239 |       4043.0 |     64 |     15 |      3 |   23 |          3.86 |             13 |               1 |              17 |               17 |                 3 |
|            2 |       3474.0 |      0 |      0 |      0 |    0 |           5.0 |              0 |               0 |               0 |                0 |                 0 |
|          400 |       5316.0 |    405 |    313 |     72 |   23 |          3.42 |              5 |               2 |              26 |               26 |                 0 |
|           25 |       3239.0 |     12 |      5 |      1 |    0 |          2.46 |              0 |               0 |               0 |                0 |                 0 |
+--------------+--------------+--------+--------+--------+------+---------------+----------------+-----------------+-----------------+------------------+-------------------+
(Output limit exceeded, 25 of 10000 total rows shown)
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT review_count,
       ROUND(julianday('now')-julianday(yelping_since),0) as days_yelping,
       useful,
       funny,
       cool, 
       fans, 
       average_stars,
       compliment_hot,
       compliment_cute,
       compliment_cool,
       compliment_funny,
       compliment_photos
FROM user;